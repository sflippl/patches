{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualization of the compositional binary model experiments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you wish to reproduce this, first run '../experiments/04-mbm-cpc.py'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 288/288 [00:08<00:00, 32.18it/s]\n"
     ]
    }
   ],
   "source": [
    "import patches\n",
    "import lettertask\n",
    "import torch.optim as optim\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "import plotnine as gg\n",
    "import lazytools_sflippl as lazytools\n",
    "import torch.nn as nn\n",
    "import torch\n",
    "\n",
    "cbms = [\n",
    "    lettertask.data.CompositionalBinaryModel(\n",
    "        width=width, change_probability=change_probability,\n",
    "        samples=10000, seed=2002\n",
    "    ) for width, change_probability in zip(\n",
    "        [[5, 5], [5, 5], [50, 50], [50, 50],\n",
    "         [5, 10], [10, 50], [5, 5, 5], [10, 10, 10]],\n",
    "        [[0.05, 0.5], [0.05, 0.2], [0.05, 0.5], [0.05, 0.2],\n",
    "         [0.2, 0.05], [0.2, 0.1], [0.05, 0.1, 0.5], [0.05, 0.1, 0.5]]\n",
    "    )\n",
    "]\n",
    "\n",
    "def regime(method, lr):\n",
    "    def optimizer(params):\n",
    "        return method(params, lr=lr)\n",
    "    return optimizer\n",
    "optimization_regimes = []\n",
    "for method in [optim.SGD, optim.Adam, optim.Adadelta]:\n",
    "    for lr in [1e-2, 1e-1, 1]:\n",
    "        optimization_regimes.append(regime(method, lr))\n",
    "\n",
    "loss_dfs = []\n",
    "angle_dfs = []\n",
    "\n",
    "with tqdm(total = len(optimization_regimes)*len(cbms)*4) as pbar:\n",
    "    for idx_cbm, cbm in enumerate(cbms):\n",
    "        for idx_opt, opt in enumerate(optimization_regimes):\n",
    "            for method in ['barec', 'lapred1p', 'lapred2p', 'cpc']:\n",
    "                angles = np.load(\n",
    "                    '../experiments/04-data/arrays/cbm_{}_opt_{}_{}_angles.npy'.\\\n",
    "                    format(idx_cbm, idx_opt, method)\n",
    "                )\n",
    "                loss = np.load(\n",
    "                    '../experiments/04-data/arrays/cbm_{}_opt_{}_{}_loss.npy'.\\\n",
    "                    format(idx_cbm, idx_opt, method)\n",
    "                )\n",
    "                loss_df = lazytools.array_to_dataframe(loss).\\\n",
    "                                    rename(columns={'dim0': 'time',\n",
    "                                                    'array': 'loss'})\n",
    "                loss_df['time'] *= 50\n",
    "                loss_df['cbm_idx'] = np.array(idx_cbm)\n",
    "                loss_df['opt_idx'] = np.array(idx_opt)\n",
    "                loss_df['method'] = np.array(method)\n",
    "                loss_df['cbm'] = cbm.title()\n",
    "                loss_df['optimizer'] = np.array(str(opt([torch.tensor(1)])), dtype=str)\n",
    "                loss_dfs.append(loss_df)\n",
    "                angle_df = lazytools.array_to_dataframe(angles).\\\n",
    "                                      rename(columns={'dim0': 'latent_dimension',\n",
    "                                                      'dim1': 'time',\n",
    "                                                      'array': 'angle'})\n",
    "                angle_df['time'] *= 10\n",
    "                angle_df['cbm_idx'] = np.array(idx_cbm)\n",
    "                angle_df['opt_idx'] = np.array(idx_opt)\n",
    "                angle_df['latent_dimension'] = angle_df['latent_dimension'].\\\n",
    "                    astype(str)\n",
    "                angle_df['method'] = np.array(method)\n",
    "                angle_df['cbm'] = cbm.title()\n",
    "                angle_df['optimizer'] = np.array(str(opt([torch.tensor(1)])), dtype=str)\n",
    "                angle_dfs.append(angle_df)\n",
    "                pbar.update(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import  pandas as pd\n",
    "angle_df = pd.concat(angle_dfs, sort=False).reset_index(drop=True)\n",
    "loss_df = pd.concat(loss_dfs, sort=False).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latent_dimension</th>\n",
       "      <th>time</th>\n",
       "      <th>angle</th>\n",
       "      <th>cbm_idx</th>\n",
       "      <th>opt_idx</th>\n",
       "      <th>method</th>\n",
       "      <th>cbm</th>\n",
       "      <th>optimizer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.901005</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.898357</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>0.897830</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>0.896557</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>0.893896</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  latent_dimension  time     angle  cbm_idx  opt_idx method  \\\n",
       "0                0     0  0.901005        0        0  barec   \n",
       "1                0    10  0.898357        0        0  barec   \n",
       "2                0    20  0.897830        0        0  barec   \n",
       "3                0    30  0.896557        0        0  barec   \n",
       "4                0    40  0.893896        0        0  barec   \n",
       "\n",
       "                        cbm                                          optimizer  \n",
       "0  CBM([5, 5], [0.05, 0.5])  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  \n",
       "1  CBM([5, 5], [0.05, 0.5])  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  \n",
       "2  CBM([5, 5], [0.05, 0.5])  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  \n",
       "3  CBM([5, 5], [0.05, 0.5])  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  \n",
       "4  CBM([5, 5], [0.05, 0.5])  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "angle_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>loss</th>\n",
       "      <th>cbm_idx</th>\n",
       "      <th>opt_idx</th>\n",
       "      <th>method</th>\n",
       "      <th>cbm</th>\n",
       "      <th>optimizer</th>\n",
       "      <th>dim1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.428557</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>0.409221</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100</td>\n",
       "      <td>0.358239</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>150</td>\n",
       "      <td>0.342821</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>200</td>\n",
       "      <td>0.283498</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   time      loss  cbm_idx  opt_idx method                       cbm  \\\n",
       "0     0  0.428557        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "1    50  0.409221        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "2   100  0.358239        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "3   150  0.342821        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "4   200  0.283498        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "\n",
       "                                           optimizer  dim1  \n",
       "0  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...   NaN  \n",
       "1  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...   NaN  \n",
       "2  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...   NaN  \n",
       "3  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...   NaN  \n",
       "4  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...   NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(loss_df[np.logical_not(np.isnan(loss_df['dim1']))]['dim1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_df.drop(columns='dim1', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>loss</th>\n",
       "      <th>cbm_idx</th>\n",
       "      <th>opt_idx</th>\n",
       "      <th>method</th>\n",
       "      <th>cbm</th>\n",
       "      <th>optimizer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.428557</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>0.409221</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100</td>\n",
       "      <td>0.358239</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>150</td>\n",
       "      <td>0.342821</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>200</td>\n",
       "      <td>0.283498</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>barec</td>\n",
       "      <td>CBM([5, 5], [0.05, 0.5])</td>\n",
       "      <td>SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   time      loss  cbm_idx  opt_idx method                       cbm  \\\n",
       "0     0  0.428557        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "1    50  0.409221        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "2   100  0.358239        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "3   150  0.342821        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "4   200  0.283498        0        0  barec  CBM([5, 5], [0.05, 0.5])   \n",
       "\n",
       "                                           optimizer  \n",
       "0  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  \n",
       "1  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  \n",
       "2  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  \n",
       "3  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  \n",
       "4  SGD (\\nParameter Group 0\\n    dampening: 0\\n  ...  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "angle_df.to_feather('05a-angle_df.feather')\n",
    "loss_df.to_feather('05a-loss_df.feather')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
