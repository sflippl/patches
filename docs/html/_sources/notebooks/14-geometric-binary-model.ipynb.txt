{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The geometric binary model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We minimally increase complexity by changing the predictable information from a single value to a 2-pixel geometric shape:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import lettertask as lt\n",
    "import patches\n",
    "import torch\n",
    "import numpy as np\n",
    "import torch.optim as optim\n",
    "import torch.nn as nn\n",
    "import pandas as pd\n",
    "import plotnine as gg\n",
    "from tqdm import tqdm\n",
    "import lazytools_sflippl as lazytools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "agbm = lt.data.AtomicGeometricBinaryModel(width=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "agbm.sample(10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Supervised model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "cts = patches.data.Hidden2DMarkovModel(agbm.to_array(), agbm.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SupervisedCNN(nn.Module):\n",
    "    def __init__(self, latent_features, input_features=None,\n",
    "                 data=None, bias=True):\n",
    "        super().__init__()\n",
    "        if data:\n",
    "            input_features = input_features or data.n_vars[0]*data.n_vars[1]\n",
    "        elif input_features is None or timesteps is None:\n",
    "            raise ValueError('You must either provide data or both input '\n",
    "                             'features and timesteps.')\n",
    "        self.latent_features = latent_features\n",
    "        self.recognition = nn.Conv2d(1, 1, 2, padding=1)\n",
    "        self.nonlinearity = nn.ReLU()\n",
    "        self.encoder = nn.Linear(9, latent_features, bias=bias)\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.recognition(\n",
    "            x['input'].reshape(\n",
    "                x['input'].shape[0], 1, *x['input'].shape[1:]\n",
    "            )\n",
    "        )\n",
    "        latent = self.nonlinearity(latent)\n",
    "        latent = self.encoder(latent.flatten(1,-1))\n",
    "        return latent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "scnn = SupervisedCNN(1, data=cts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "cdl = torch.utils.data.DataLoader(cts, batch_size=4, drop_last=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10/10 [00:30<00:00,  3.11s/it]\n"
     ]
    }
   ],
   "source": [
    "optimizer = optim.Adam(scnn.parameters())\n",
    "criterion = nn.MSELoss()\n",
    "loss_traj = []\n",
    "running_loss = 0\n",
    "for epoch in tqdm(range(10)):\n",
    "    for i, data in enumerate(cdl):\n",
    "        if i<len(cdl):\n",
    "            optimizer.zero_grad()\n",
    "            prediction = scnn(data)\n",
    "            loss = criterion(prediction, data['latent_values'])\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            running_loss += loss\n",
    "            if i % 50 == 49:\n",
    "                loss_traj.append(running_loss.detach().numpy()/50)\n",
    "                running_loss = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8760194091184)>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(gg.ggplot(lazytools.array_to_dataframe(np.array(loss_traj)),\n",
    "           gg.aes(x='dim0', y='array')) +\n",
    "    gg.geom_line(alpha=0.2) +\n",
    "    gg.geom_smooth())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We learn the structure in about one epoch. Linear wisdom would imply an order of 10 epochs for contrastive coding; some assumption of complexity having an additional effect might suggest 100 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "horizontal = []\n",
    "vertical = []\n",
    "for data in cdl:\n",
    "    prediction = scnn(data)\n",
    "    horizontal.append(prediction[data['latent_values']==1].detach().numpy())\n",
    "    vertical.append(prediction[data['latent_values']==-1].detach().numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "horizontal_values = []\n",
    "for item in horizontal:\n",
    "    for it in item:\n",
    "        horizontal_values.append(it)\n",
    "vertical_values = []\n",
    "for item in vertical:\n",
    "    for it in item:\n",
    "        vertical_values.append(it)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.], dtype=float32)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(vertical_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.], dtype=float32)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(horizontal_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = list(scnn.parameters())[0]\n",
    "rf_bias = list(scnn.parameters())[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.2285551 ,  0.70418257],\n",
       "       [-0.7443484 ,  0.9353416 ]], dtype=float32)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = rf.detach().numpy()[0,0,:,:]\n",
    "rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.48420677], dtype=float32)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_bias = rf_bias.detach().numpy()\n",
    "rf_bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8760206777783)>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lazytools.matrix_heatmap(rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Parameter containing:\n",
       "tensor([[-0.5182, -1.9470, -0.3160, -1.6089,  0.0485,  2.1464,  0.2247,  1.5091,\n",
       "         -0.5769]], requires_grad=True)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(scnn.parameters())[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Parameter containing:\n",
       "tensor([-0.0802], requires_grad=True)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(scnn.parameters())[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[1.],\n",
       "        [1.],\n",
       "        [1.],\n",
       "        [1.]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['latent_values']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter containing:\n",
       " tensor([[[[ 1.2286,  0.7042],\n",
       "           [-0.7443,  0.9353]]]], requires_grad=True), Parameter containing:\n",
       " tensor([-0.4842], requires_grad=True), Parameter containing:\n",
       " tensor([[-0.5182, -1.9470, -0.3160, -1.6089,  0.0485,  2.1464,  0.2247,  1.5091,\n",
       "          -0.5769]], requires_grad=True), Parameter containing:\n",
       " tensor([-0.0802], requires_grad=True)]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(scnn.parameters())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Supervised prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SupervisedPredictiveCNN(nn.Module):\n",
    "    def __init__(self, latent_features, input_features=None,\n",
    "                 data=None, bias=True):\n",
    "        super().__init__()\n",
    "        if data:\n",
    "            input_features = input_features or data.n_vars[0]*data.n_vars[1]\n",
    "        elif input_features is None or timesteps is None:\n",
    "            raise ValueError('You must either provide data or both input '\n",
    "                             'features and timesteps.')\n",
    "        self.latent_features = latent_features\n",
    "        self.recognition = nn.Conv2d(1, 1, 2, padding=1)\n",
    "        self.nonlinearity = nn.ReLU()\n",
    "        self.encoder = nn.Linear(9, latent_features, bias=bias)\n",
    "        self.predictor = nn.Linear(latent_features, 5*latent_features)\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.recognition(\n",
    "            x['input'].reshape(\n",
    "                x['input'].shape[0], 1, *x['input'].shape[1:]\n",
    "            )\n",
    "        )\n",
    "        latent = self.nonlinearity(latent)\n",
    "        latent = self.encoder(latent.flatten(1,-1))\n",
    "        latent = self.predictor(latent).reshape(-1, 5, self.latent_features)\n",
    "        return latent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "spcnn = SupervisedPredictiveCNN(1, data=cts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10/10 [00:35<00:00,  3.37s/it]\n"
     ]
    }
   ],
   "source": [
    "optimizer = optim.Adam(spcnn.parameters())\n",
    "criterion = nn.MSELoss()\n",
    "loss_traj = []\n",
    "running_loss = 0\n",
    "for epoch in tqdm(range(10)):\n",
    "    running_loss = 0\n",
    "    for i, data in enumerate(cdl):\n",
    "        if i<len(cdl):\n",
    "            optimizer.zero_grad()\n",
    "            prediction = spcnn(data)\n",
    "            loss = criterion(prediction, data['future_latent_values'])\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            running_loss += loss\n",
    "            if i % 50 == 49:\n",
    "                loss_traj.append(running_loss.detach().numpy()/50)\n",
    "                running_loss = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (-9223363276647995816)>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(gg.ggplot(lazytools.array_to_dataframe(np.array(loss_traj)),\n",
    "           gg.aes(x='dim0', y='array')) +\n",
    "    gg.geom_line(alpha=0.2) +\n",
    "    gg.geom_smooth())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Contrastive coding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SupervisedCNN(nn.Module):\n",
    "    def __init__(self, latent_features, input_features=None,\n",
    "                 data=None, bias=True):\n",
    "        super().__init__()\n",
    "        if data:\n",
    "            input_features = input_features or data.n_vars[0]*data.n_vars[1]\n",
    "        elif input_features is None or timesteps is None:\n",
    "            raise ValueError('You must either provide data or both input '\n",
    "                             'features and timesteps.')\n",
    "        self.latent_features = latent_features\n",
    "        self.recognition = nn.Conv2d(1, 1, 2, padding=1)\n",
    "        self.nonlinearity = nn.LeakyReLU()\n",
    "        self.encoder = nn.Linear(36, latent_features, bias=bias)\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.recognition(\n",
    "            x.reshape(-1, 1, *x.shape[3:])\n",
    "        )\n",
    "        latent = self.nonlinearity(latent)\n",
    "        latent = self.encoder(latent.flatten(1,-1))\n",
    "        return latent.reshape(*x.shape[:3], 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "ccts = patches.data.Contrastive2DTimeSeries(agbm.to_array(), n_contrasts=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TwoLayeredScaffold(patches.networks.SimpleScaffold):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.encoder = SupervisedCNN(1, data=ccts)\n",
    "        self.predictor = nn.Linear(1, 5)\n",
    "\n",
    "    def encode(self, x):\n",
    "        return self.encoder(x)\n",
    "\n",
    "    def predict(self, x):\n",
    "        return self.predictor(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "tls = TwoLayeredScaffold()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = next(iter(ccts))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = patches.losses.ContrastiveLoss(loss=nn.MSELoss())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "cdl = torch.utils.data.DataLoader(ccts, drop_last=True, batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([8, 1, 1, 5, 5])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['current_values'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 11%|█         | 3303/31240 [01:05<08:23, 55.54it/s]"
     ]
    }
   ],
   "source": [
    "optimizer = optim.Adam(tls.parameters())\n",
    "loss_traj = []\n",
    "running_loss = 0\n",
    "n_epochs = 10\n",
    "with tqdm(total=n_epochs*len(cdl)) as pbar:\n",
    "    for epoch in range(n_epochs):\n",
    "        running_loss = 0\n",
    "        for i, data in enumerate(cdl):\n",
    "            if i<len(cdl):\n",
    "                optimizer.zero_grad()\n",
    "                code = tls(data)\n",
    "                loss = criterion(code)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "                running_loss += loss\n",
    "                if i % 50 == 49:\n",
    "                    loss_traj.append(running_loss.detach().numpy()/50)\n",
    "                    running_loss = 0\n",
    "                pbar.update(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_df = lazytools.array_to_dataframe(np.array(loss_traj))\\\n",
    "                   .rename(columns={'dim0': 'steps', 'array': 'loss'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(gg.ggplot(loss_df, gg.aes(x='steps', y='loss')) +\n",
    "    gg.geom_line())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reaction(parameters):\n",
    "    rf = list(parameters.parameters())[0].detach().numpy()\n",
    "    bias = list(parameters.parameters())[1].detach().numpy()\n",
    "    shapes = [\n",
    "        np.array([[1, 1], [0, 0]]),\n",
    "        np.array([[0, 0], [1, 1]]),\n",
    "        np.array([[1, 0], [1, 0]]),\n",
    "        np.array([[0, 1], [0, 1]])\n",
    "    ]\n",
    "    reaction = []\n",
    "    for arr in shapes:\n",
    "        reaction.append(np.maximum((rf*arr).sum()+bias, 0))\n",
    "    return np.array(reaction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.]], dtype=float32)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reaction(tls.encoder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "para = list(tls.encoder.recognition.parameters())[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Parameter containing:\n",
       "tensor([-0.3121], requires_grad=True)"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "para"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([-0.2000])"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "para.data.copy_(torch.tensor([-0.2]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "tls.encoder.recognition.state_dict()['bias'] = torch.tensor([-0.2], requires_grad=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "list(tls.encoder.recognition.parameters())[1] = torch.tensor([-0.2], requires_grad=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter containing:\n",
       " tensor([[[[ 0.0417,  0.4287],\n",
       "           [ 0.0861, -0.4825]]]], requires_grad=True), Parameter containing:\n",
       " tensor([0.4032], requires_grad=True), Parameter containing:\n",
       " tensor([[-0.0615, -0.1717, -0.1592, -0.0625,  0.0192,  0.1412, -0.0352, -0.0912,\n",
       "          -0.1064, -0.1878,  0.1052, -0.1599, -0.0018,  0.0223,  0.1274, -0.0075,\n",
       "          -0.1345, -0.1849,  0.0710,  0.0840, -0.1089,  0.1351, -0.1185, -0.0882,\n",
       "          -0.0827, -0.0861,  0.0888, -0.0609,  0.0635,  0.0914,  0.0710,  0.0875,\n",
       "           0.0788, -0.1448, -0.0521, -0.1273]], requires_grad=True), Parameter containing:\n",
       " tensor([0.0411], requires_grad=True), Parameter containing:\n",
       " tensor([[ 0.2905],\n",
       "         [-0.5697],\n",
       "         [ 0.2709],\n",
       "         [ 0.5867],\n",
       "         [ 0.2625]], requires_grad=True), Parameter containing:\n",
       " tensor([ 0.2281, -0.8703, -0.8500, -0.4862,  0.0746], requires_grad=True)]"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(tls.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.4485308],\n",
       "       [0.       ],\n",
       "       [0.       ],\n",
       "       [1.1553174]], dtype=float32)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reaction(scnn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter containing:\n",
       " tensor([[[[ 1.2286,  0.7042],\n",
       "           [-0.7443,  0.9353]]]], requires_grad=True), Parameter containing:\n",
       " tensor([-0.4842], requires_grad=True), Parameter containing:\n",
       " tensor([[-0.5182, -1.9470, -0.3160, -1.6089,  0.0485,  2.1464,  0.2247,  1.5091,\n",
       "          -0.5769]], requires_grad=True), Parameter containing:\n",
       " tensor([-0.0802], requires_grad=True)]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(scnn.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.]], dtype=float32)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reaction(spcnn)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
