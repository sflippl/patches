{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simple shape recognition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import lettertask as lt\n",
    "import patches\n",
    "import torch\n",
    "import numpy as np\n",
    "import torch.optim as optim\n",
    "import torch.nn as nn\n",
    "import pandas as pd\n",
    "import plotnine as gg\n",
    "from tqdm import tqdm\n",
    "import lazytools_sflippl as lazytools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "agbm = lt.data.AtomicGeometricBinaryModel(width=2, samples=100000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 1., 1.],\n",
       "       [1., 1., 0., 0.],\n",
       "       [0., 0., 1., 1.],\n",
       "       ...,\n",
       "       [1., 0., 1., 0.],\n",
       "       [0., 1., 0., 1.],\n",
       "       [1., 0., 1., 0.]])"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agbm_flat = agbm.to_array().reshape(-1, 4)\n",
    "agbm_flat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Supervised model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "cts = patches.data.HiddenMarkovModel(agbm_flat, agbm.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SupervisedCNN(nn.Module):\n",
    "    def __init__(self, latent_features, input_features=None,\n",
    "                 data=None, bias=True):\n",
    "        super().__init__()\n",
    "        if data:\n",
    "            input_features = input_features or data.n_vars\n",
    "        elif input_features is None or timesteps is None:\n",
    "            raise ValueError('You must either provide data or both input '\n",
    "                             'features and timesteps.')\n",
    "        self.latent_features = latent_features\n",
    "        self.recognition = nn.Linear(input_features, 2*latent_features)\n",
    "        self.nonlinearity = nn.ReLU()\n",
    "        self.shifter = nn.Linear(2*latent_features, latent_features)\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.recognition(x['input'])\n",
    "        latent = self.nonlinearity(latent)\n",
    "        latent = self.shifter(latent)\n",
    "        return latent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "scnn = SupervisedCNN(1, data=cts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "cdl = torch.utils.data.DataLoader(cts, batch_size=8, drop_last=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10/10 [00:18<00:00,  1.77s/it]\n"
     ]
    }
   ],
   "source": [
    "optimizer = optim.Adam(scnn.parameters())\n",
    "criterion = nn.MSELoss()\n",
    "loss_traj = []\n",
    "running_loss = 0\n",
    "for epoch in tqdm(range(10)):\n",
    "    running_loss = 0\n",
    "    for i, data in enumerate(cdl):\n",
    "        if i<len(cdl):\n",
    "            optimizer.zero_grad()\n",
    "            prediction = scnn(data)\n",
    "            loss = criterion(prediction, data['latent_values'])\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            running_loss += loss\n",
    "            if i % 50 == 49:\n",
    "                loss_traj.append(running_loss.detach().numpy()/50)\n",
    "                running_loss = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8738117112980)>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(gg.ggplot(lazytools.array_to_dataframe(np.array(loss_traj)),\n",
    "           gg.aes(x='dim0', y='array')) +\n",
    "    gg.geom_line(alpha=0.2) +\n",
    "    gg.geom_smooth())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter containing:\n",
       " tensor([[-0.3011,  1.3222, -0.5326,  1.5537],\n",
       "         [-0.8771,  0.9711, -1.0244,  1.1124]], requires_grad=True),\n",
       " Parameter containing:\n",
       " tensor([ 0.8268, -0.1251], requires_grad=True),\n",
       " Parameter containing:\n",
       " tensor([[ 1.0823, -2.0464]], requires_grad=True),\n",
       " Parameter containing:\n",
       " tensor([-1.], requires_grad=True)]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(scnn.parameters())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reaction(module):\n",
    "    shapes = [\n",
    "        torch.tensor([[1., 1], [0, 0]]),\n",
    "        torch.tensor([[0., 0], [1, 1]]),\n",
    "        torch.tensor([[1., 0], [1, 0]]),\n",
    "        torch.tensor([[0., 1], [0, 1]])\n",
    "    ]\n",
    "    reaction = []\n",
    "    for arr in shapes:\n",
    "        reaction.append(module.nonlinearity((module.recognition(arr.flatten()))).detach().numpy())\n",
    "    return np.array(reaction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.8478427, 0.       ],\n",
       "       [1.8478427, 0.       ],\n",
       "       [0.       , 0.       ],\n",
       "       [3.7026415, 1.958362 ]], dtype=float32)"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reaction(scnn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter containing:\n",
       " tensor([[-0.3011,  1.3222, -0.5326,  1.5537],\n",
       "         [-0.8771,  0.9711, -1.0244,  1.1124]], requires_grad=True),\n",
       " Parameter containing:\n",
       " tensor([ 0.8268, -0.1251], requires_grad=True),\n",
       " Parameter containing:\n",
       " tensor([[ 1.0823, -2.0464]], requires_grad=True),\n",
       " Parameter containing:\n",
       " tensor([-1.], requires_grad=True)]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(scnn.parameters())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Supervised prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SupervisedPredictiveCNN(nn.Module):\n",
    "    def __init__(self, latent_features, input_features=None,\n",
    "                 data=None, bias=True):\n",
    "        super().__init__()\n",
    "        if data:\n",
    "            input_features = input_features or data.n_vars\n",
    "        elif input_features is None or timesteps is None:\n",
    "            raise ValueError('You must either provide data or both input '\n",
    "                             'features and timesteps.')\n",
    "        self.latent_features = latent_features\n",
    "        self.recognition = nn.Linear(input_features, 2*latent_features)\n",
    "        self.nonlinearity = nn.ReLU()\n",
    "        self.shifter = nn.Linear(2*latent_features, latent_features)\n",
    "        self.predictor = nn.Linear(latent_features, 5*latent_features)\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.recognition(x['input'])\n",
    "        latent = self.nonlinearity(latent)\n",
    "        latent = self.shifter(latent)\n",
    "        latent = self.predictor(latent).reshape(-1, 5, self.latent_features)\n",
    "        return latent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "spcnn = SupervisedPredictiveCNN(1, data=cts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 10/10 [02:03<00:00, 12.34s/it]\n"
     ]
    }
   ],
   "source": [
    "optimizer = optim.Adam(spcnn.parameters())\n",
    "criterion = nn.MSELoss()\n",
    "loss_traj = []\n",
    "running_loss = 0\n",
    "for epoch in tqdm(range(10)):\n",
    "    running_loss = 0\n",
    "    for i, data in enumerate(cdl):\n",
    "        if i<len(cdl):\n",
    "            optimizer.zero_grad()\n",
    "            prediction = spcnn(data)\n",
    "            loss = criterion(prediction, data['future_latent_values'])\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            running_loss += loss\n",
    "            if i % 50 == 49:\n",
    "                loss_traj.append(running_loss.detach().numpy()/50)\n",
    "                running_loss = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/sflippl/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8738106920319)>"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(gg.ggplot(lazytools.array_to_dataframe(np.array(loss_traj)),\n",
    "           gg.aes(x='dim0', y='array')) +\n",
    "    gg.geom_line(alpha=0.2) +\n",
    "    gg.geom_smooth())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.1118238, 0.       ],\n",
       "       [0.       , 2.0657213],\n",
       "       [0.       , 0.       ],\n",
       "       [0.       , 0.       ]], dtype=float32)"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reaction(spcnn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Contrastive coding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "ccts = patches.data.Contrastive1DTimeSeries(agbm_flat, n_contrasts=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SupervisedCNN(nn.Module):\n",
    "    def __init__(self, latent_features, input_features=None,\n",
    "                 data=None, bias=True):\n",
    "        super().__init__()\n",
    "        if data:\n",
    "            input_features = input_features or data.n_vars\n",
    "        elif input_features is None or timesteps is None:\n",
    "            raise ValueError('You must either provide data or both input '\n",
    "                             'features and timesteps.')\n",
    "        self.latent_features = latent_features\n",
    "        self.recognition = nn.Linear(input_features, 10*latent_features)\n",
    "        self.nonlinearity = nn.ReLU()\n",
    "        self.layer_2 = nn.Linear(10*latent_features, 2*latent_features)\n",
    "        self.shifter = nn.Linear(2*latent_features, latent_features)\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.recognition(x)\n",
    "        latent = self.nonlinearity(latent)\n",
    "        latent = self.layer_2(latent)\n",
    "        latent = self.shifter(latent)\n",
    "        return latent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TwoLayeredScaffold(patches.networks.SimpleScaffold):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.encoder = SupervisedCNN(1, data=ccts)\n",
    "        self.predictor = nn.Linear(1, 5)\n",
    "\n",
    "    def encode(self, x):\n",
    "        return self.encoder(x)\n",
    "\n",
    "    def predict(self, x):\n",
    "        return self.predictor(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "tls = TwoLayeredScaffold()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = patches.losses.ContrastiveLoss(loss=patches.losses.BilinearLoss())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "cdl = torch.utils.data.DataLoader(ccts, drop_last=True, batch_size=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 24998/24998 [01:25<00:00, 291.46it/s]\n"
     ]
    }
   ],
   "source": [
    "optimizer = optim.Adam(tls.parameters(), lr=2e-4)\n",
    "loss_traj = []\n",
    "running_loss = 0\n",
    "n_epochs = 2\n",
    "with tqdm(total=n_epochs*len(cdl)) as pbar:\n",
    "    for epoch in range(n_epochs):\n",
    "        running_loss = 0\n",
    "        for i, data in enumerate(cdl):\n",
    "            if i<len(cdl):\n",
    "                optimizer.zero_grad()\n",
    "                code = tls(data)\n",
    "                loss = criterion(code)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "                running_loss += loss\n",
    "                if i % 50 == 49:\n",
    "                    loss_traj.append(running_loss.detach().numpy()/50)\n",
    "                    running_loss = 0\n",
    "                pbar.update(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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xLJly/jDH/7Ajh07eO+99/jpp5849dRTufLKK1NZXiGE6BOK0vh2mEgkurxTd9MdwLOzsznjjDPweDwALFmyhJqamg6nj8sYGyFSr0fB5oILLqC0tJRrr72WiRMn8tlnn7Fy5UquvPJKcnNzAfB4PFx++eVs27YtpQUWQoi+oLfYANjt9lb3t2xNMZlMzYKNqqqUlJQYrTarVq3is88+w+fzdTieprPvCSG6p0fBZs2aNdx///3s2rWLJ554gkMOOaTN4yZMmMBHH33UqwIKIUR/MJlMxv9tNlur+1uGDj3YNB1snJ2dzYwZM5q12qxdu5Zdu3Z1qQzSFSUyyfbt2/npp58Guhit9CjYfP3111x66aW43e4Oj3O5XBx55JE9KpgQQvQ3VVVRVdXoimoadurq6lq1viiK0mpzzNLS0matNt9++22bEymkK0pkuurqanw+30AXo5VeDx4OhUJUV1e3ugkhRKZRVbVZa03LYNN0plPLrihdy1abF198kYaGhi6tRiwtNkL0Xo+CjaZpzJ8/nz322AO3201hYWGrmxBCZBpFUbBarUagaRpsoO3uqJbfs1gsFBcXG602GzZs4Ouvv6a2trbVuaTFRojU61GweeCBB7jvvvv47W9/i6Zp3Hzzzdx6663svffejBo1iiVLlqS6nEII0efMZjM2m63DYNO0xUaf7t1STk5Os1ab559/npqammarGssCfWIw0GcTppMeleiJJ57gjjvu4IYbbgDgtNNO47bbbmP16tXsu+++/PDDDyktpBBC9IcRI0ZQWFjYqxYbAKvVSnFxMTNnzgRg7dq1/Otf/2o11kZabESmajobMN30KNhs2bKFyZMno6oqFovF+GNVFIXf/va3PP3006ksoxBC9AuLxYKqql1uselITk4OZ511Fi6XC4DHH3+c2tpaYwFAme4tMpm+QndX13zqTz0KNvn5+dTV1QGNn3C++eYb476qqirZEFMIkdFaBhv935bdTu212EBjq01+fj6nnnoqAKtXr+bjjz/G7/cD0hU12Pn9fhoaGga6GH1GDzbp2GLTo6h1+OGH89VXX3HCCSdwzjnncPvtt7N7924sFgtLlizhmGOOSXU5hRCi37QMNIqikEgkujzGRud2uznxxBN555138Pv9/OlPf2LatGlkZ2cDEmAGM6/Xi8fjISsra6CL0if08WKDJtjc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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (8738065065150)>"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(gg.ggplot(lazytools.array_to_dataframe(np.array(loss_traj)),\n",
    "           gg.aes(x='dim0', y='array')) +\n",
    "    gg.geom_line(alpha=0.2) +\n",
    "    gg.geom_smooth())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.        , 0.        , 0.        , 0.26246744, 0.11760747,\n",
       "        0.        , 0.        , 0.9107413 , 0.        , 0.21530226],\n",
       "       [0.        , 0.        , 0.3131689 , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.7251331 , 0.33528548],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.16908337, 0.4808659 , 0.15243438, 0.41830346],\n",
       "       [0.        , 0.26551086, 0.17354515, 0.        , 0.12910569,\n",
       "        0.        , 0.        , 0.2813657 , 0.18116304, 0.1322843 ]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reaction(tls.encoder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[-1.4180],\n",
       "        [-1.4567],\n",
       "        [ 0.4783],\n",
       "        [ 0.4446]], grad_fn=<AddmmBackward>)"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tls.encode(torch.tensor([[1., 1, 0, 0],\n",
    "                 [0, 0, 1, 1],\n",
    "                 [1, 0, 1, 0],\n",
    "                 [0, 1, 0, 1]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For such a complex model, there is a sudden shift after four iterations -- and we have found the right dimension. This suggests a highly nonlinear loss landscape and both the linear and the nonlinear case might be suitable for a more principled mathematical investigation of this landscape as it is an important determinant for the algorithm's performance at more complex tasks. For now, we attempt to distill the model.\n",
    "For the single nonlinearity, many epochs seemed to not change anything. In light of this new evidence, we will now revisit this case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SupervisedCNN(nn.Module):\n",
    "    def __init__(self, latent_features, input_features=None,\n",
    "                 data=None, bias=True):\n",
    "        super().__init__()\n",
    "        if data:\n",
    "            input_features = input_features or data.n_vars\n",
    "        elif input_features is None or timesteps is None:\n",
    "            raise ValueError('You must either provide data or both input '\n",
    "                             'features and timesteps.')\n",
    "        self.latent_features = latent_features\n",
    "        self.recognition = nn.Linear(input_features, 2*latent_features)\n",
    "        self.nonlinearity = nn.ReLU()\n",
    "        self.shifter = nn.Linear(2*latent_features, latent_features)\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.recognition(x)\n",
    "        latent = self.nonlinearity(latent)\n",
    "        latent = self.shifter(latent)\n",
    "        return latent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "tls = TwoLayeredScaffold()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 749940/749940 [41:02<00:00, 304.50it/s]\n"
     ]
    }
   ],
   "source": [
    "optimizer = optim.Adam(tls.parameters(), lr=2e-3)\n",
    "loss_traj = []\n",
    "running_loss = 0\n",
    "n_epochs = 60\n",
    "with tqdm(total=n_epochs*len(cdl)) as pbar:\n",
    "    for epoch in range(n_epochs):\n",
    "        running_loss = 0\n",
    "        for i, data in enumerate(cdl):\n",
    "            if i<len(cdl):\n",
    "                optimizer.zero_grad()\n",
    "                code = tls(data)\n",
    "                loss = criterion(code)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "                running_loss += loss\n",
    "                if i % 50 == 49:\n",
    "                    loss_traj.append(running_loss.detach().numpy()/50)\n",
    "                    running_loss = 0\n",
    "                pbar.update(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (-9223363298789937639)>"
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(gg.ggplot(lazytools.array_to_dataframe(np.array(loss_traj)),\n",
    "           gg.aes(x='dim0', y='array')) +\n",
    "    gg.geom_line(alpha=0.2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.3978952727983707"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-np.log(1/11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.3727616123163715"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array(loss_traj).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.0792],\n",
       "        [-1.1186],\n",
       "        [ 0.0792],\n",
       "        [ 0.0792]], grad_fn=<AddmmBackward>)"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tls.encode(torch.tensor([[1., 1, 0, 0],\n",
    "                 [0, 0, 1, 1],\n",
    "                 [1, 0, 1, 0],\n",
    "                 [0, 1, 0, 1]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have therefore failed to find one dimension. What if we add one more feature dimension?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SupervisedCNN(nn.Module):\n",
    "    def __init__(self, latent_features, input_features=None,\n",
    "                 data=None, bias=True):\n",
    "        super().__init__()\n",
    "        if data:\n",
    "            input_features = input_features or data.n_vars\n",
    "        elif input_features is None or timesteps is None:\n",
    "            raise ValueError('You must either provide data or both input '\n",
    "                             'features and timesteps.')\n",
    "        self.latent_features = latent_features\n",
    "        self.recognition = nn.Linear(input_features, 3*latent_features)\n",
    "        self.nonlinearity = nn.ReLU()\n",
    "        self.shifter = nn.Linear(3*latent_features, latent_features)\n",
    "\n",
    "    def forward(self, x):\n",
    "        latent = self.recognition(x)\n",
    "        latent = self.nonlinearity(latent)\n",
    "        latent = self.shifter(latent)\n",
    "        return latent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [],
   "source": [
    "tls = TwoLayeredScaffold()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 749940/749940 [43:27<00:00, 287.57it/s]\n"
     ]
    }
   ],
   "source": [
    "optimizer = optim.Adam(tls.parameters(), lr=2e-3)\n",
    "loss_traj = []\n",
    "running_loss = 0\n",
    "n_epochs = 60\n",
    "with tqdm(total=n_epochs*len(cdl)) as pbar:\n",
    "    for epoch in range(n_epochs):\n",
    "        running_loss = 0\n",
    "        for i, data in enumerate(cdl):\n",
    "            if i<len(cdl):\n",
    "                optimizer.zero_grad()\n",
    "                code = tls(data)\n",
    "                loss = criterion(code)\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "                running_loss += loss\n",
    "                if i % 50 == 49:\n",
    "                    loss_traj.append(running_loss.detach().numpy()/50)\n",
    "                    running_loss = 0\n",
    "                pbar.update(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (-9223363298789997182)>"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(gg.ggplot(lazytools.array_to_dataframe(np.array(loss_traj)),\n",
    "           gg.aes(x='dim0', y='array')) +\n",
    "    gg.geom_line(alpha=0.2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0.8737],\n",
       "        [ 0.7358],\n",
       "        [-1.6286],\n",
       "        [-1.5536]], grad_fn=<AddmmBackward>)"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tls.encode(torch.tensor([[1., 1, 0, 0],\n",
    "                 [0, 0, 1, 1],\n",
    "                 [1, 0, 1, 0],\n",
    "                 [0, 1, 0, 1]]))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
